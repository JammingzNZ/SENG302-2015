package seng302.group6.Controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import seng302.group6.Model.ItemClasses.Workspace;
import seng302.group6.Model.Report.Compiler;
import seng302.group6.Model.Report.ReportPreset;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Controller for the Report Window pop-up
 * Created by jaln on 6/07/15.
 * Modified by Dan and Josh 9/07/15-11/07/15
 */
public class ReportWindowController {


    @FXML CheckBox AllProjectsCheck;
    @FXML CheckBox TeamsInAllProjectsCheck;
    @FXML CheckBox PeopleInTeamsInAllProjectsCheck;
    @FXML CheckBox SkillsInPeopleInTeamsInAllProjectsCheck;
    @FXML CheckBox ReleasesInAllProjectsCheck;

    @FXML CheckBox UnallocatedTeamsCheck;
    @FXML CheckBox PeopleInUnallocatedTeamsCheck;
    @FXML CheckBox SkillsInPeopleInUnallocatedTeamsCheck;

    @FXML CheckBox UnallocatedPeopleCheck;
    @FXML CheckBox SkillsInUnallocatedPeopleCheck;

    @FXML CheckBox AllBacklogsCheck;
    @FXML CheckBox StoriesInAllBacklogsCheck;
    @FXML CheckBox ACsInStoriesInAllBacklogsCheck;
    @FXML CheckBox DepsInStoriesInAllBacklogsCheck;
    @FXML CheckBox TasksInStoriesInAllBacklogsCheck;

    @FXML CheckBox UnallocatedStoriesCheck;
    @FXML CheckBox ACsInUnallocatedStoriesCheck;
    @FXML CheckBox DepsInUnallocatedStoriesCheck;
    @FXML CheckBox TasksInUnallocatedStoriesCheck;

    @FXML CheckBox AllSprintsCheck;
    @FXML CheckBox TeamInAllSprintsCheck;
    @FXML CheckBox PeopleInTeamInAllSprintsCheck;
    @FXML CheckBox SkillsInPeopleInTeamInAllSprintsCheck;
    @FXML CheckBox StoriesInAllSprintsCheck;
    @FXML CheckBox ACsInStoriesInAllSprintsCheck;
    @FXML CheckBox DepsInStoriesInAllSprintsCheck;
    @FXML CheckBox TasksInStoriesInAllSprintsCheck;
    @FXML CheckBox PeopleInTasksInStoriesInAllSprintsCheck;
    @FXML CheckBox EffortInTasksInStoriesInAllSprintsCheck;

    @FXML CheckBox AllTeamsCheck;
    @FXML CheckBox PeopleInAllTeamsCheck;
    @FXML CheckBox SkillsInPeopleInAllTeamsCheck;

    @FXML CheckBox AllPeopleCheck;
    @FXML CheckBox SkillsInAllPeopleCheck;

    @FXML CheckBox AllSkillsCheck;

    @FXML CheckBox AllStoriesCheck;
    @FXML CheckBox ACsInAllStoriesCheck;
    @FXML CheckBox DepsInAllStoriesCheck;
    @FXML CheckBox TasksInAllStoriesCheck;

    @FXML ComboBox<ReportPreset> presetsCombo;

    private ObservableList<ReportPreset> presets;
    private boolean preventCombo = false;

    public static final String BRAND_XML_REPORT_FILE_DESC = "XML status report files";

    /**
     * Initializer for report frame. Makes sure that certain checkboxes are
     * disabled if their "parent" checkbox (i.e. if it can only be included
     * if the parent is included) is disabled.
     */
    public void initialize()
    {
        presets = FXCollections.observableArrayList(ReportPreset.values());
        presetsCombo.setItems(presets);

        presetsCombo.getSelectionModel().select(ReportPreset.PROJECTS);
        presetsAction();
    }

    /**
     * Cancel Button
     * Closes the Export Report window
     */
    @FXML
    void cancelAction() {
        Stage stage = (Stage) AllProjectsCheck.getScene().getWindow();
        stage.close();
    }

    /**
     * Export Button
     * First asks the user for a save location using filerpicker window.
     * Next it will create a new Compiler object and set the inclusion booleans appropriate to the checkboxes
     * Then it will create a report at the given save location with specified inclusions
     */
    @FXML
    void exportAction() {

        /*
        Pops up a save location browser with:
        - Default report name generated by "Status-Report_<date>_<project name>.xml"
        - Default location is the last known workspace save location
         */
        Date date = new Date();
        SimpleDateFormat dateF = new SimpleDateFormat("dd-MM-YY");
        String projectName = Workspace.getProjectName(Workspace.getCurrentProject());
        String ext = "xml";
        if (projectName == null) {
            projectName = "Undefined";
        }
        String defaultFilename = "Status-Report_" + dateF.format(date) + projectName + "." + ext;

        File fileToSave = fileChooser("Export Status Report Location", "save", defaultFilename, BRAND_XML_REPORT_FILE_DESC, ext);

        if (fileToSave != null) {

            /*
            Tries to compile a report with the given inclusions
            - Creates a new Compiler object
            - Sets the inclusions booleans within the compiler
            - Compiles the report based on inclusions
            - Writes the report to a file with given path
            - Closes the Export Report window
            - Displays a confirmation / error message
             */
            try {
                Compiler report = new Compiler();
                setInclusions(report);
                report.compile();
                report.writeFile(fileToSave.getPath());
                cancelAction();
                AppController.instance().showInfoPopup("Report Successfully Exported", "Save location: " + fileToSave.getPath());
            } catch (IOException e) {
                cancelAction();
                AppController.instance().showErrorPopup("Error Exporting Report", e.getMessage());
            }

        }
    }

    /**
     * Clears all selected items and sets certain ones depending on the preset
     * selected.
     */
    @FXML
    public void presetsAction()
    {
        if (!preventCombo) {
            clearSelections();

            switch (presetsCombo.getSelectionModel().getSelectedItem()) {
                case BLANK:
                    break;
                case PROJECTS:
                    AllProjectsCheck.setSelected(true);
                    TeamsInAllProjectsCheck.setSelected(true);
                    PeopleInTeamsInAllProjectsCheck.setSelected(true);
                    SkillsInPeopleInTeamsInAllProjectsCheck.setSelected(true);
                    ReleasesInAllProjectsCheck.setSelected(true);
                    break;
                case TEAMS:
                    AllTeamsCheck.setSelected(true);
                    PeopleInAllTeamsCheck.setSelected(true);
                    SkillsInPeopleInAllTeamsCheck.setSelected(true);
                    break;
                case PEOPLE:
                    AllPeopleCheck.setSelected(true);
                    SkillsInAllPeopleCheck.setSelected(true);
                    break;
                case SKILLS:
                    AllSkillsCheck.setSelected(true);
                    break;
                case BACKLOGS:
                    AllBacklogsCheck.setSelected(true);
                    StoriesInAllBacklogsCheck.setSelected(true);
                    ACsInStoriesInAllBacklogsCheck.setSelected(true);
                    DepsInStoriesInAllBacklogsCheck.setSelected(true);
                    TasksInStoriesInAllBacklogsCheck.setSelected(true);
                    break;
                case STORIES:
                    AllStoriesCheck.setSelected(true);
                    ACsInAllStoriesCheck.setSelected(true);
                    DepsInAllStoriesCheck.setSelected(true);
                    TasksInAllStoriesCheck.setSelected(true);
                    break;
                case SPRINTS:
                    AllSprintsCheck.setSelected(true);
                    TeamInAllSprintsCheck.setSelected(true);
                    PeopleInTeamInAllSprintsCheck.setSelected(true);
                    SkillsInPeopleInTeamInAllSprintsCheck.setSelected(true);
                    StoriesInAllSprintsCheck.setSelected(true);
                    ACsInStoriesInAllSprintsCheck.setSelected(true);
                    DepsInStoriesInAllSprintsCheck.setSelected(true);
                    TasksInStoriesInAllSprintsCheck.setSelected(true);
                    PeopleInTasksInStoriesInAllSprintsCheck.setSelected(true);
                    EffortInTasksInStoriesInAllSprintsCheck.setSelected(true);
                    break;
                case STATUS:
                    AllProjectsCheck.setSelected(true);
                    TeamsInAllProjectsCheck.setSelected(true);
                    PeopleInTeamsInAllProjectsCheck.setSelected(true);
                    SkillsInPeopleInTeamsInAllProjectsCheck.setSelected(true);
                    ReleasesInAllProjectsCheck.setSelected(true);
                    AllTeamsCheck.setSelected(true);
                    PeopleInAllTeamsCheck.setSelected(true);
                    SkillsInPeopleInAllTeamsCheck.setSelected(true);
                    AllPeopleCheck.setSelected(true);
                    SkillsInAllPeopleCheck.setSelected(true);
                    AllSkillsCheck.setSelected(true);
                    AllBacklogsCheck.setSelected(true);
                    StoriesInAllBacklogsCheck.setSelected(true);
                    ACsInStoriesInAllBacklogsCheck.setSelected(true);
                    DepsInStoriesInAllBacklogsCheck.setSelected(true);
                    TasksInStoriesInAllBacklogsCheck.setSelected(true);
                    AllStoriesCheck.setSelected(true);
                    ACsInAllStoriesCheck.setSelected(true);
                    DepsInAllStoriesCheck.setSelected(true);
                    TasksInAllStoriesCheck.setSelected(true);
                    AllSprintsCheck.setSelected(true);
                    TeamInAllSprintsCheck.setSelected(true);
                    PeopleInTeamInAllSprintsCheck.setSelected(true);
                    SkillsInPeopleInTeamInAllSprintsCheck.setSelected(true);
                    StoriesInAllSprintsCheck.setSelected(true);
                    ACsInStoriesInAllSprintsCheck.setSelected(true);
                    DepsInStoriesInAllSprintsCheck.setSelected(true);
                    TasksInStoriesInAllSprintsCheck.setSelected(true);
                    PeopleInTasksInStoriesInAllSprintsCheck.setSelected(true);
                    EffortInTasksInStoriesInAllSprintsCheck.setSelected(true);
                    break;
            }

            updateCheckboxes(); // Enables/disabled children boxes
        }
    }

    /**
     * Clears all selected checkboxes
     */
    private void clearSelections()
    {
        // All Items
        AllProjectsCheck.setSelected(false);
        AllTeamsCheck.setSelected(false);
        AllPeopleCheck.setSelected(false);
        AllSkillsCheck.setSelected(false);
        AllBacklogsCheck.setSelected(false);
        AllStoriesCheck.setSelected(false);
        AllSprintsCheck.setSelected(false);
        // Unallocated Items
        UnallocatedPeopleCheck.setSelected(false);
        UnallocatedStoriesCheck.setSelected(false);
        UnallocatedTeamsCheck.setSelected(false);
    }

    /**
     * File chooser abstraction...
     * creates a file chooser dialog, opening it in the location of the last saved file in the workspace.
     * when a file is to be saved by the dialog, and the extension is not found on the end of the filename,
     * the extension is appended automatically.
     *
     * @param  title the file chooser dialog title
     * @param  mode specifies the file dialog mode: "open" or "save"
     * @param  defaultFilename the default name to put in the file name field, eg default.txt.
     * @param  fileDescription a string describing the file type eg "text files"
     * @param  extension is the file extension to filter on, eg txt for .txt files
     * @return a file handle if a valid file location was specified, null if not.
     */
    private File fileChooser(String title, String mode, String defaultFilename, String fileDescription, String extension)
    {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle(title);

        // Set extension filter
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(fileDescription + " (*." + extension + ")", "*." + extension);
        fileChooser.getExtensionFilters().add(extFilter);

        // go to last opened file directory
        if(Workspace.appdata.getProjectFile() != null) {
            File last = Workspace.appdata.getProjectFile().getParentFile();
            fileChooser.setInitialDirectory(last);
        }
        fileChooser.setInitialFileName(defaultFilename);

        Stage primaryStage = (Stage) AllProjectsCheck.getScene().getWindow();
        if(mode.equals("open")) {
            return fileChooser.showOpenDialog(primaryStage);
        }else if(mode.equals("save")) {
            File file = fileChooser.showSaveDialog(primaryStage);
            if(file != null) {
                String path = file.getPath();
                if (!path.endsWith("." + extension)) {
                    file = new File(path + "." + extension);
                }
            }
            return file;
        }
        else{
            throw new IllegalArgumentException("mode may be either save or open, it was " + mode);
        }
    }

    /**
     * Reads the checkbox state (checked/unchecked) and sets the boolean value in the report accordingly
     * If checked, True will be passed to the boolean,
     * If unchecked, False will be passed to the boolean.
     * @param report is the Compiler report object being processed / about to be written
     */
    private void setInclusions(Compiler report) {
        report.setIncludeAllProjects(AllProjectsCheck.isSelected());
        report.setIncludeReleasesInAllProjects(ReleasesInAllProjectsCheck.isSelected());
        report.setIncludeTeamsInAllProjects(TeamsInAllProjectsCheck.isSelected());
        report.setIncludePeopleInTeamsInAllProjects(PeopleInTeamsInAllProjectsCheck.isSelected());
        report.setIncludeSkillsInPeopleInTeamsInAllProjects(SkillsInPeopleInTeamsInAllProjectsCheck.isSelected());

        report.setIncludeUnallocatedTeams(UnallocatedTeamsCheck.isSelected());
        report.setIncludePeopleInUnallocatedTeams(PeopleInUnallocatedTeamsCheck.isSelected());
        report.setIncludeSkillsInPeopleInUnallocatedTeams(SkillsInPeopleInUnallocatedTeamsCheck.isSelected());

        report.setIncludeUnallocatedPeople(UnallocatedPeopleCheck.isSelected());
        report.setIncludeSkillsInUnallocatedPeople(SkillsInUnallocatedPeopleCheck.isSelected());

        report.setIncludeAllBacklogs(AllBacklogsCheck.isSelected());
        report.setIncludeStoriesInAllBacklogs(StoriesInAllBacklogsCheck.isSelected());
        report.setIncludeACsInStoriesInAllBacklogs(ACsInStoriesInAllBacklogsCheck.isSelected());
        report.setIncludeDepsInStoriesInAllBacklogs(DepsInStoriesInAllBacklogsCheck.isSelected());
        report.setIncludeTasksInStoriesInAllBacklogs(TasksInStoriesInAllBacklogsCheck.isSelected());

        report.setIncludeUnallocatedStories(UnallocatedStoriesCheck.isSelected());
        report.setIncludeACsInUnallocatedStories(ACsInUnallocatedStoriesCheck.isSelected());
        report.setIncludeDepsInUnallocatedStories(DepsInUnallocatedStoriesCheck.isSelected());
        report.setIncludeTasksInUnallocatedStories(TasksInUnallocatedStoriesCheck.isSelected());

        report.setIncludeAllSprints(AllSprintsCheck.isSelected());
        report.setIncludeTeamInAllSprints(TeamInAllSprintsCheck.isSelected());
        report.setIncludePeopleInTeamInAllSprints(PeopleInTeamInAllSprintsCheck.isSelected());
        report.setIncludeSkillsInPeopleInTeamInAllSprints(SkillsInPeopleInTeamInAllSprintsCheck.isSelected());
        report.setIncludeStoriesInAllSprints(StoriesInAllSprintsCheck.isSelected());
        report.setIncludeACsInStoriesInAllSprints(ACsInStoriesInAllSprintsCheck.isSelected());
        report.setIncludeDepsInStoriesInAllSprints(DepsInStoriesInAllSprintsCheck.isSelected());
        report.setIncludeTasksInStoriesInAllSprints(TasksInStoriesInAllSprintsCheck.isSelected());
        report.setIncludePeopleInTasksInStoriesInAllSprints(PeopleInTasksInStoriesInAllSprintsCheck.isSelected());
        report.setIncludeEffortInTasksInStoriesInAllSprints(EffortInTasksInStoriesInAllSprintsCheck.isSelected());

        report.setIncludeAllTeams(AllTeamsCheck.isSelected());
        report.setIncludePeopleInAllTeams(PeopleInAllTeamsCheck.isSelected());
        report.setIncludeSkillsInPeopleInAllTeams(SkillsInPeopleInAllTeamsCheck.isSelected());

        report.setIncludeAllPeople(AllPeopleCheck.isSelected());
        report.setIncludeSkillsInAllPeople(SkillsInAllPeopleCheck.isSelected());

        report.setIncludeAllSkills(AllSkillsCheck.isSelected());

        report.setIncludeAllStories(AllStoriesCheck.isSelected());
        report.setIncludeACsInAllStories(ACsInAllStoriesCheck.isSelected());
        report.setIncludeDepsInAllStories(DepsInAllStoriesCheck.isSelected());
        report.setIncludeTasksInAllStories(TasksInAllStoriesCheck.isSelected());
    }

    /**
     * Makes sure that checkboxes are disabled if they should be when important
     * checkboxes are checked.
     */
    @FXML
    public void boxChecked()
    {
        preventCombo = true;
        presetsCombo.getSelectionModel().select(ReportPreset.BLANK);
        preventCombo = false;
        updateCheckboxes();
    }


    /**
     * Updates the checkboxes depending on what other checkboxes are active/inactive
     */
    private void updateCheckboxes()
    {
        // First Tab
        if(AllProjectsCheck.isSelected()) {
            ReleasesInAllProjectsCheck.setDisable(false);
            TeamsInAllProjectsCheck.setDisable(false);
        } else {
            ReleasesInAllProjectsCheck.setSelected(false);
            TeamsInAllProjectsCheck.setSelected(false);
            ReleasesInAllProjectsCheck.setDisable(true);
            TeamsInAllProjectsCheck.setDisable(true);
        }

        if(TeamsInAllProjectsCheck.isSelected()) {
            PeopleInTeamsInAllProjectsCheck.setDisable(false);
        } else {
            PeopleInTeamsInAllProjectsCheck.setSelected(false);
            PeopleInTeamsInAllProjectsCheck.setDisable(true);
        }

        if(PeopleInTeamsInAllProjectsCheck.isSelected()) {
            SkillsInPeopleInTeamsInAllProjectsCheck.setDisable(false);
        } else {
            SkillsInPeopleInTeamsInAllProjectsCheck.setSelected(false);
            SkillsInPeopleInTeamsInAllProjectsCheck.setDisable(true);
        }

        if(UnallocatedTeamsCheck.isSelected()) {
            PeopleInUnallocatedTeamsCheck.setDisable(false);
        } else {
            PeopleInUnallocatedTeamsCheck.setSelected(false);
            PeopleInUnallocatedTeamsCheck.setDisable(true);
        }

        if(PeopleInUnallocatedTeamsCheck.isSelected()) {
            SkillsInPeopleInUnallocatedTeamsCheck.setDisable(false);
        } else {
            SkillsInPeopleInUnallocatedTeamsCheck.setSelected(false);
            SkillsInPeopleInUnallocatedTeamsCheck.setDisable(true);
        }

        if(UnallocatedPeopleCheck.isSelected()) {
            SkillsInUnallocatedPeopleCheck.setDisable(false);
        } else {
            SkillsInUnallocatedPeopleCheck.setSelected(false);
            SkillsInUnallocatedPeopleCheck.setDisable(true);
        }
        // Second Tab
        if(AllBacklogsCheck.isSelected()) {
            StoriesInAllBacklogsCheck.setDisable(false);
        } else {
            StoriesInAllBacklogsCheck.setSelected(false);
            StoriesInAllBacklogsCheck.setDisable(true);
        }

        if(StoriesInAllBacklogsCheck.isSelected()) {
            ACsInStoriesInAllBacklogsCheck.setDisable(false);
            DepsInStoriesInAllBacklogsCheck.setDisable(false);
            TasksInStoriesInAllBacklogsCheck.setDisable(false);
        } else {
            ACsInStoriesInAllBacklogsCheck.setSelected(false);
            DepsInStoriesInAllBacklogsCheck.setSelected(false);
            TasksInStoriesInAllBacklogsCheck.setSelected(false);
            ACsInStoriesInAllBacklogsCheck.setDisable(true);
            DepsInStoriesInAllBacklogsCheck.setDisable(true);
            TasksInStoriesInAllBacklogsCheck.setDisable(true);
        }

        if(UnallocatedStoriesCheck.isSelected()) {
            ACsInUnallocatedStoriesCheck.setDisable(false);
            DepsInUnallocatedStoriesCheck.setDisable(false);
            TasksInUnallocatedStoriesCheck.setDisable(false);
        } else {
            ACsInUnallocatedStoriesCheck.setSelected(false);
            DepsInUnallocatedStoriesCheck.setSelected(false);
            TasksInUnallocatedStoriesCheck.setSelected(false);
            ACsInUnallocatedStoriesCheck.setDisable(true);
            DepsInUnallocatedStoriesCheck.setDisable(true);
            TasksInUnallocatedStoriesCheck.setDisable(true);
        }
        // Thrid Tab
        if(AllSprintsCheck.isSelected()) {
            TeamInAllSprintsCheck.setDisable(false);
            StoriesInAllSprintsCheck.setDisable(false);
        } else {
            TeamInAllSprintsCheck.setSelected(false);
            StoriesInAllSprintsCheck.setSelected(false);
            TeamInAllSprintsCheck.setDisable(true);
            StoriesInAllSprintsCheck.setDisable(true);
        }

        if(TeamInAllSprintsCheck.isSelected()) {
            PeopleInTeamInAllSprintsCheck.setDisable(false);
        } else {
            PeopleInTeamInAllSprintsCheck.setSelected(false);
            PeopleInTeamInAllSprintsCheck.setDisable(true);
        }
        
        if(PeopleInTeamInAllSprintsCheck.isSelected()) {
            SkillsInPeopleInTeamInAllSprintsCheck.setDisable(false);
        } else {
            SkillsInPeopleInTeamInAllSprintsCheck.setSelected(false);
            SkillsInPeopleInTeamInAllSprintsCheck.setDisable(true);
        }

        if(StoriesInAllSprintsCheck.isSelected()) {
            ACsInStoriesInAllSprintsCheck.setDisable(false);
            DepsInStoriesInAllSprintsCheck.setDisable(false);
            TasksInStoriesInAllSprintsCheck.setDisable(false);
        } else {
            ACsInStoriesInAllSprintsCheck.setSelected(false);
            ACsInStoriesInAllSprintsCheck.setDisable(true);
            DepsInStoriesInAllSprintsCheck.setSelected(false);
            DepsInStoriesInAllSprintsCheck.setDisable(true);
            TasksInStoriesInAllSprintsCheck.setSelected(false);
            TasksInStoriesInAllSprintsCheck.setDisable(true);
        }

        if(TasksInStoriesInAllSprintsCheck.isSelected()) {
            PeopleInTasksInStoriesInAllSprintsCheck.setDisable(false);
            EffortInTasksInStoriesInAllSprintsCheck.setDisable(false);
        } else {
            PeopleInTasksInStoriesInAllSprintsCheck.setSelected(false);
            EffortInTasksInStoriesInAllSprintsCheck.setSelected(false);
            PeopleInTasksInStoriesInAllSprintsCheck.setDisable(true);
            EffortInTasksInStoriesInAllSprintsCheck.setDisable(true);
        }
        // Fourth Tab
        if(AllTeamsCheck.isSelected()) {
            PeopleInAllTeamsCheck.setDisable(false);
        } else {
            PeopleInAllTeamsCheck.setSelected(false);
            PeopleInAllTeamsCheck.setDisable(true);
        }

        if(PeopleInAllTeamsCheck.isSelected()) {
            SkillsInPeopleInAllTeamsCheck.setDisable(false);
        } else {
            SkillsInPeopleInAllTeamsCheck.setSelected(false);
            SkillsInPeopleInAllTeamsCheck.setDisable(true);
        }

        if(AllPeopleCheck.isSelected()) {
            SkillsInAllPeopleCheck.setDisable(false);
        } else {
            SkillsInAllPeopleCheck.setSelected(false);
            SkillsInAllPeopleCheck.setDisable(true);
        }

        if(AllStoriesCheck.isSelected()) {
            ACsInAllStoriesCheck.setDisable(false);
            DepsInAllStoriesCheck.setDisable(false);
            TasksInAllStoriesCheck.setDisable(false);
        } else {
            ACsInAllStoriesCheck.setSelected(false);
            DepsInAllStoriesCheck.setSelected(false);
            TasksInAllStoriesCheck.setSelected(false);
            ACsInAllStoriesCheck.setDisable(true);
            DepsInAllStoriesCheck.setDisable(true);
            TasksInAllStoriesCheck.setDisable(true);
        }
    }
}
